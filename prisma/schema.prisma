generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String               @id @default(cuid())
  name            String?              @db.VarChar(100)
  email           String               @unique @db.VarChar(255)
  password        String               @db.VarChar(255)
  image           String?              @db.VarChar(255)
  role            UserRole             @default(USER)
  partnerId       String?
  isActive        Boolean              @default(true)
  lastLoginAt     DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  deletedAt       DateTime?
  isDeleted       Boolean              @default(false)
  adminActions    AdminAction[]
  apiKeys         ApiKey[]
  documents       Document[]
  donations       Donation[]
  favoriteStories FavoriteStory[]
  inviteToken     InviteToken?
  sentMessages    Message[]            @relation("SentMessages")
  statusChanges   StoryStatusHistory[]
  partner         Partner?             @relation(fields: [partnerId], references: [id])

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([isDeleted])
}

model Partner {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  isDeleted     Boolean   @default(false)
  name          String
  description   String?
  logo          String?
  website       String?
  address       String?
  phoneNumber   String?
  contactPerson String?
  email         String    @unique
  isVerified    Boolean   @default(false)

  // Relations
  users         User[]
  stories       Story[]
  messages      Message[]

  @@map("partners")
}

model InviteToken {
  id        String   @id @default(cuid())
  token     String   @unique @db.VarChar(255)
  userId    String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([isUsed])
}

enum StoryStatus {
  DRAFT              // 임시저장
  PENDING           // 대기중
  REVIEW            // 검토대기
  REVISION_REQUESTED // 수정요청
  APPROVED          // 승인됨
  PUBLISHED         // 게시됨
  REJECTED          // 반려됨
}

model Story {
  id               String               @id @default(cuid())
  title            String
  content          String
  recipientAge     Int
  recipientGender  String
  partnerId        String
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  recipientRegion  String
  recipientAddress String?
  recipientName    String?
  recipientPhone   String?
  status           StoryStatus          @default(DRAFT)
  donations        Donation[]
  favoritedBy      FavoriteStory[]
  items            Item[]
  messages         Message[]
  partner          Partner              @relation(fields: [partnerId], references: [id])
  statusHistory    StoryStatusHistory[]
}

model Donation {
  id               String       @id @default(cuid())
  amount           Float
  message          String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  donorId          String
  storyId          String
  ngoId            String
  paymentReference String?
  status           String
  donor            User         @relation(fields: [donorId], references: [id])
  ngo              NGO          @relation(fields: [ngoId], references: [id])
  story            Story        @relation(fields: [storyId], references: [id])
  order            Order?
  settlements      Settlement[] @relation("DonationToSettlement")
}

model Order {
  id             String          @id @default(cuid())
  donationId     String          @unique
  coupangOrderId String?
  trackingNumber String?
  totalAmount    Float
  status         String
  errorMessage   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  payment        CoupangPayment?
  donation       Donation        @relation(fields: [donationId], references: [id])
  products       OrderProduct[]
}

model OrderProduct {
  id          String @id @default(cuid())
  orderId     String
  productId   String
  productName String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  order       Order  @relation(fields: [orderId], references: [id])
}

model Settlement {
  id               String     @id @default(cuid())
  ngoId            String
  totalAmount      Float
  status           String
  scheduledDate    DateTime
  completedDate    DateTime?
  paymentReference String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  ngo              NGO        @relation(fields: [ngoId], references: [id])
  donations        Donation[] @relation("DonationToSettlement")
}

model CoupangPayment {
  id               String    @id @default(cuid())
  orderId          String    @unique
  amount           Float
  status           String
  scheduledDate    DateTime
  completedDate    DateTime?
  paymentReference String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  order            Order     @relation(fields: [orderId], references: [id])
}

model NGO {
  id               String       @id @default(cuid())
  name             String
  settlementPeriod String
  settlementDay    Int
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  donations        Donation[]
  settlements      Settlement[]
}

model Item {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  coupangUrl  String?
  category    String
  storyId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  story       Story    @relation(fields: [storyId], references: [id])
}

model StoryStatusHistory {
  id          String   @id @default(cuid())
  storyId     String
  note        String?
  changedById String
  createdAt   DateTime @default(now())
  fromStatus  String
  toStatus    String
  changedBy   User     @relation(fields: [changedById], references: [id])
  story       Story    @relation(fields: [storyId], references: [id])
}

model AdminAction {
  id          String          @id @default(cuid())
  adminId     String
  actionType  AdminActionType
  entityType  String          @db.VarChar(50)
  entityId    String
  description String
  details     String?
  createdAt   DateTime        @default(now())
  admin       User            @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([actionType])
  @@index([entityType])
  @@index([entityId])
  @@index([createdAt])
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique @db.VarChar(100)
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String           @db.VarChar(200)
  content     String
  isRead      Boolean          @default(false)
  relatedId   String?
  relatedType String?          @db.VarChar(50)
  createdAt   DateTime         @default(now())

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}

model PartnerInvite {
  id        String   @id @default(cuid())
  email     String   @unique @db.VarChar(255)
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
  @@index([expiresAt])
}

model Document {
  id        String    @id @default(cuid())
  title     String    @db.VarChar(200)
  content   String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isDeleted Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isDeleted])
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique @db.VarChar(100)
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
}

model ApiKey {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(100)
  key       String    @unique @db.VarChar(255)
  isActive  Boolean   @default(true)
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id])

  @@index([key])
  @@index([isActive])
  @@index([userId])
  @@index([expiresAt])
}

model Message {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    String
  senderId   String
  senderRole String
  partnerId  String
  storyId    String?
  isRead     Boolean  @default(false)

  // Relations
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  partner    Partner  @relation(fields: [partnerId], references: [id])
  story      Story?   @relation(fields: [storyId], references: [id])

  @@map("messages")
}

model FavoriteStory {
  id        String   @id @default(cuid())
  userId    String
  storyId   String
  createdAt DateTime @default(now())
  story     Story    @relation(fields: [storyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, storyId])
  @@index([userId])
  @@index([storyId])
}

enum UserRole {
  USER
  DONOR
  PARTNER
  ADMIN
}

enum AdminActionType {
  CREATE
  UPDATE
  DELETE
  APPROVE
  REJECT
  PUBLISH
  UNPUBLISH
  IMAGE_GENERATE
  INVITE_PARTNER
}

enum NotificationType {
  STORY_STATUS_CHANGE
  DONATION_RECEIVED
  DONATION_COMPLETED
  SYSTEM_MESSAGE
  PARTNER_INVITATION
}
